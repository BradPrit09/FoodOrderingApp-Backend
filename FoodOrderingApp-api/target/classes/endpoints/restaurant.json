{
  "swagger": "2.0",
  "info": {
    "title": "Restaurant API",
    "version": "1.0.0",
    "description": "API of Restaurant Services"
  },
  "host": "FoodOrderingApp.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api",
  "tags": [
    {
      "name": "API#001 Restaurant",
      "description": "All operations marked with 'API#001 Restaurant' are relevant to the restaurant use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/restaurant": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get all restaurants"
        ],
        "operationId": "getAll",
        "summary": "get all restaurants",
        "description": "Customer can get a list of all restaurants available.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK - Restaurants list fetched successfully",
            "schema": {
              "$ref": "#/definitions/RestaurantListResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/restaurant/name/{restaurantName}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get restaurants by name"
        ],
        "operationId": "getRestaurantsByName",
        "summary": "Get restaurants by name",
        "description": "Customer can get a list of all restaurants by restaurant's name.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/restaurantName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Restaurants list fetched successfully",
            "schema": {
              "$ref": "#/definitions/RestaurantListResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/restaurant/category/{categoryId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get restaurants by category"
        ],
        "operationId": "getRestaurantsByCategory",
        "summary": "Get restaurants by category",
        "description": "Customer can get list of restaurants available under a category.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/categoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Restaurants list fetched successfully",
            "schema": {
              "$ref": "#/definitions/RestaurantListResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/restaurant/{restaurantId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get restaurant details"
        ],
        "operationId": "getRestaurantById",
        "summary": "Get restaurant details",
        "description": "Customer can get any restaurant's details by its id.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/restaurantId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Restaurant details fetched successfully",
            "schema": {
              "$ref": "#/definitions/RestaurantDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/restaurant/edit/{restaurantId}": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#001 Update restaurant rating"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "updateRatingByRestaurantId",
        "summary": "Update restaurant rating",
        "description": "Customer can update the rating of any restaurant.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/restaurantId"
          },
          {
            "$ref": "#/parameters/customerRating"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Restaurant rating updated successfully",
            "schema": {
              "$ref": "#/definitions/RestaurantUpdatedResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "restaurantName": {
      "name": "restaurantName",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Name of the restaurant"
    },
    "customerRating": {
      "name": "customerRating",
      "type": "number",
      "in": "query",
      "required": true,
      "description": "Rating given by customer"
    },
    "categoryId": {
      "name": "categoryId",
      "type": "string",
      "in": "path",
      "format": "uuid",
      "required": true,
      "description": "Unique identifier of the category in a standard UUID format"
    },
    "restaurantId": {
      "name": "restaurantId",
      "type": "string",
      "in": "path",
      "format": "uuid",
      "required": true,
      "description": "Unique identifier of Restaurant in a standard UUID format"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory customer credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "RestaurantListResponse": {
      "type": "object",
      "properties": {
        "restaurants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RestaurantList"
          },
          "description": "List of restaurants"
        }
      }
    },
    "RestaurantDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the restaurant in a standard UUID format"
        },
        "restaurant_name": {
          "type": "string",
          "description": "Name of the restaurant"
        },
        "photo_URL": {
          "type": "string",
          "description": "URL for the picture of the restaurant"
        },
        "customer_rating": {
          "type": "number",
          "description": "Rating of the restaurant"
        },
        "average_price": {
          "type": "integer",
          "description": "Average price for two people"
        },
        "number_customers_rated": {
          "type": "integer",
          "description": "Number of customers rated the restaurant"
        },
        "address": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the address in a standard UUID format"
            },
            "flat_building_name": {
              "type": "string",
              "description": "Flat and building address"
            },
            "locality": {
              "type": "string",
              "description": "Locality of the address"
            },
            "city": {
              "type": "string",
              "description": "City of the address"
            },
            "pincode": {
              "type": "string",
              "description": "pincode of the address"
            },
            "state": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier of the state in a standard UUID format"
                },
                "state_name": {
                  "type": "string",
                  "description": "Name of the state"
                }
              }
            }
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryList"
          },
          "description": "List of categories"
        }
      },
      "description": "Restaurant details"
    },
    "RestaurantUpdatedResponse":{
      "type": "object",
      "properties": {
        "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the restaurant in a standard UUID format"
        },
        "status": {
          "type": "string",
          "description": "status of the updated restaurant"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "RestaurantList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the restaurant in a standard UUID format"
        },
        "restaurant_name": {
          "type": "string",
          "description": "Name of the restaurant"
        },
        "photo_URL": {
          "type": "string",
          "description": "URL for the picture of the restaurant"
        },
        "customer_rating": {
          "type": "number",
          "description": "Rating of the restaurant"
        },
        "average_price": {
          "type": "integer",
          "description": "Average price for two people"
        },
        "number_customers_rated": {
          "type": "integer",
          "description": "Number of customers rated the restaurant"
        },
        "address": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the address in a standard UUID format"
            },
            "flat_building_name": {
              "type": "string",
              "description": "Flat and building address"
            },
            "locality": {
              "type": "string",
              "description": "Locality of the address"
            },
            "city": {
              "type": "string",
              "description": "City of the address"
            },
            "pincode": {
              "type": "string",
              "description": "pincode of the address"
            },
            "state": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier of the state in a standard UUID format"
                },
                "state_name": {
                  "type": "string",
                  "description": "Name of the state"
                }
              }
            }
          }
        },
        "categories": {
          "type": "string",
          "description": "List of categories"
        }
      }
    },
    "CategoryList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the category in a standard UUID format"
        },
        "category_name": {
          "type": "string",
          "description": "Name of the category"
        },
        "item_list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ItemList"
          },
          "description": "List of items"
        }
      }
    },
    "ItemList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the item in a standard UUID format"
        },
        "item_name": {
          "type": "string",
          "description": "Name of the item"
        },
        "price": {
          "type": "integer",
          "description": "Price of the item"
        },
        "type": {
          "type": "string",
          "enum": [
            "VEG",
            "NON_VEG"
          ]
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "RST-001",
        "message": "Restaurant with this restaurant id does not exist"
      }
    }
  }
}