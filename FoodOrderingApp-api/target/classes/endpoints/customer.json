{
  "swagger": "2.0",
  "info": {
    "title": "Customer API",
    "version": "1.0.0",
    "description": "API of Customer Services"
  },
  "host": "FoodOrderingApp.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api",
  "tags": [
    {
      "name": "API#001 Customers",
      "description": "All operations marked with 'API#001 Customers' are relevant to the customer use case"
    }
  ],
  "securityDefinitions": {
    "BasicAuthorization": {
      "type": "basic",
      "description": "HTTP Basic Authentication is used for authentication. The server authentication credentials should be sent in the Authorization header.\nBasic authentication should only be used over HTTPS (SSL).\n\nThe Authorization header is constructed as follows:\n\n- The contactNumber and password are combined into a string separated by a colon, e.g.: contactNumber:password\n- The resulting string is encoded using the RFC2045-MIME variant of Base64, except not limited to 76 char/line.\n- The authorization method and a space i.e. \"Basic \" is then put before the encoded string.\n\n```\nPOST https://FoodOrderingApp.io/api/v1/authentication HTTP/1.1\nAuthorization: Basic YW5kcmFwcF91czpqVEdhNUVKODR0\n```\n"
    },
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/customer/signup": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#001 Customer Sign up"
        ],
        "operationId": "registerCustomer",
        "summary": "signup",
        "description": "Each customer who needs access to FoodOrderingApp application should signup using their valid contact number, email and set a password for an authorized access.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "SignupCustomerRequest",
            "description": "Request containing customer signup information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupCustomerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Customer has been signed up successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/SignupCustomerResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/customer/login": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "operationId": "login",
        "security": [
          {
            "BasicAuthorization": []
          }
        ],
        "summary": "login",
        "description": "Each customer logs into FoodOrderingApp application using their contactNumber and password as credentials.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Authenticated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "access-token": {
                "type": "string",
                "description": "Generated access token (JWT) of successfully authenticated customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/customer/logout": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "logout",
        "summary": "logout",
        "description": "Customer logs out of the FoodOrderingApp application.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Logged out successfully",
            "schema": {
              "$ref": "#/definitions/LogoutResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/customer": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#001 Update Customer Details"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "updateCustomerDetails",
        "summary": "Update Customer Details",
        "description": "Customers can update their name using this endpoint with authorization.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "UpdateCustomerRequest",
            "description": "Request containing customer update information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UPDATED - Customer details have been updated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/UpdateCustomerResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/customer/password": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#001 Update Customer Password"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "updateCustomerPassword",
        "summary": "Update Customer Password",
        "description": "Customers can update their password using this endpoint with authorization.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "UpdatePasswordRequest",
            "description": "Request containing customer password update information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UPDATED - Customer password has been updated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/UpdatePasswordResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Authorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory customer credentials in Base64 encoded format."
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory customer credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "SignupCustomerRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the new customer"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new customer"
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the new customer"
        },
        "contact_number": {
          "type": "string",
          "description": "Contact Number of the new customer"
        },
        "password": {
          "type": "string",
          "description": "Password of the new customer",
          "format": "password",
          "x-obfuscated": true
        }
      },
      "required": [
        "first_name",
        "email_address",
        "contact_number",
        "password"
      ]
    },

    "SignupCustomerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the signed up customer"
        },
        "status": {
          "type": "string",
          "description": "message showing the status of the signed up customer"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "example": {
        "id": "2ddf4646-ecd0-11e8-8eb2-f2801f1b9fd1",
        "status": "USER SUCCESSFULLY REGISTERED"
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid for the customer authentication after he signs in."
        },
        "message": {
          "type": "string",
          "description": "message to show the status of the signed in customer"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the new customer"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new customer"
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the new customer"
        },
        "contact_number": {
          "type": "string",
          "description": "Contact Number of the new customer"
        }
      },
      "required": [
        "id",
        "message",
        "first_name",
        "last_name",
        "contact_number",
        "email_address"
      ]
    },
    "LogoutResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the customer who is signed out"
        },
        "message": {
          "type": "string",
          "description": "message to show the status of the signed out customer"
        }
      },
      "required": [
        "id",
        "message"
      ]
    },
    "UpdateCustomerRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the new customer"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new customer"
        }
      }
    },
    "UpdateCustomerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the customer with updated details"
        },
        "status": {
          "type": "string",
          "description": "message showing the status of the customer"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the new customer"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new customer"
        }
      },
      "required": [
        "id",
        "status",
        "first_name"
      ],
      "example": {
        "id": "2ddf4646-ecd0-11e8-8eb2-f2801f1b9fd1",
        "status": "USER DETAILS SUCCESSFULLY UPDATED"
      }
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "description": "Existing password of the customer"
        },
        "new_password": {
          "type": "string",
          "description": "New password by customer"
        }
      }
    },
    "UpdatePasswordResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the customer with updated password"
        },
        "status": {
          "type": "string",
          "description": "message showing the status of the customer"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "example": {
        "id": "2ddf4646-ecd0-11e8-8eb2-f2801f1b9fd1",
        "status": "USER PASSWORD SUCCESSFULLY UPDATED"
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "USR-001",
        "message": "Contact number already registered"
      }
    }
  }
}