{
  "swagger": "2.0",
  "info": {
    "title": "Order API",
    "version": "1.0.0",
    "description": "API of Order Services"
  },
  "host": "FoodOrderingApp.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api",
  "tags": [
    {
      "name": "API#001 Order",
      "description": "All operations marked with 'API#001 Order' are relevant to the order use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/order": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#001 Save order"
        ],
        "operationId": "saveOrder",
        "summary": "Save order",
        "description": "Orders made by customer gets saved permanently in database using this endpoint.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "SaveOrderRequest",
            "description": "Request containing customer order information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveOrderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Customer's order has been placed successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/SaveOrderResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/order/coupon/{couponName}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get coupon details"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getCoupon",
        "summary": "Get coupon details",
        "description": "Customer can get the details about the coupon.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/couponName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Coupon details fetched successfully",
            "schema": {
              "$ref": "#/definitions/CouponDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/order/customer": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#001 Get all past orders"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getOrdersByCustomer",
        "summary": "Get all past orders",
        "description": "Customers can get the list of all past orders made by them using this endpoint.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Orders made by customer has been fetched successfully",
            "schema": {
              "$ref": "#/definitions/CustomerOrderResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - customer has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "couponName": {
      "name": "couponName",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Name of the coupon applied"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory customer credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "SaveOrderRequest": {
      "type": "object",
      "properties": {
        "address_id": {
          "type": "string",
          "description": "uuid of the address"
        },
        "payment_id": {
          "type": "string",
          "format": "uuid",
          "description": "uuid of the payment"
        },
        "bill": {
          "type": "number",
          "description": "order bill"
        },
        "discount": {
          "type": "number",
          "description": "order discount"
        },
        "coupon_id": {
          "type": "string",
          "format": "uuid",
          "description": "uuid of the coupon"
        },
        "restaurant_id": {
          "type": "string",
          "format": "uuid",
          "description": "uuid of the restaurant"
        },
        "item_quantities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ItemQuantity"
          },
          "description": "List of item quantities."
        }
      },
      "required": [
        "address_id",
        "payment_id",
        "bill",
        "restaurant_id"
      ]
    },
    "SaveOrderResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the saved order"
        },
        "status": {
          "type": "string",
          "description": "message showing the status of the saved address"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "CustomerOrderResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrderList"
          },
          "description": "List of orders"
        }
      }
    },
    "ItemQuantity": {
      "type": "object",
      "properties": {
        "item_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the item in a standard UUID format"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of item ordered"
        },
        "price":{
          "type": "integer",
          "description": "Total price of the item"
        }
      },
      "example": {
        "item_id": "2ddf4646-ecd0-11e8-8eb2-f2801f1b9fd1",
        "quantity": 2,
        "price": 100
      }
    },
    "CouponDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the coupon in a standard UUID format"
        },
        "coupon_name": {
          "type": "string",
          "description": "Name of the coupon"
        },
        "percent": {
          "type": "integer",
          "description": "Discount percentage for the coupon"
        }
      }
    },
    "OrderList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the order in a standard UUID format"
        },
        "bill": {
          "type": "number",
          "description": "order bill"
        },
        "coupon": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the coupon in a standard UUID format"
            },
            "coupon_name": {
              "type": "string",
              "description": "Name of the coupon"
            },
            "percent": {
              "type": "integer",
              "description": "Discount percentage of the coupon"
            }
          }
        },
        "discount": {
          "type": "number",
          "description": "order discount"
        },
        "date": {
          "type": "string",
          "description": "Full date-time format (yyyy-MM-dd HH:mm)"
        },
        "payment": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the payment in a standard UUID format"
            },
            "payment_name": {
              "type": "string",
              "description": "Name of the payment method used"
            }
          }
        },
        "customer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the customer in a standard UUID format"
            },
            "first_name": {
              "type": "string",
              "description": "First name of the new customer"
            },
            "last_name": {
              "type": "string",
              "description": "Last name of the new customer"
            },
            "email_address": {
              "type": "string",
              "description": "Email address of the new customer"
            },
            "contact_number": {
              "type": "string",
              "description": "Contact Number of the new customer"
            }
          }
        },
        "address": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the address in a standard UUID format"
            },
            "flat_building_name": {
              "type": "string",
              "description": "Flat and building address"
            },
            "locality": {
              "type": "string",
              "description": "Locality of the address"
            },
            "city": {
              "type": "string",
              "description": "City of the address"
            },
            "pincode": {
              "type": "string",
              "description": "pincode of the address"
            },
            "state": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier of the state in a standard UUID format"
                },
                "state_name": {
                  "type": "string",
                  "description": "Name of the state"
                }
              }
            }
          }
        },
        "item_quantities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ItemQuantityResponse"
          },
          "description": "List of item quantity"
        }
      }
    },
    "ItemQuantityResponse": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier of the item in a standard UUID format"
            },
            "item_name": {
              "type": "string",
              "description": "Name of the item"
            },
            "item_price": {
              "type": "integer",
              "description": "Price of the item"
            },
            "type": {
              "type": "string",
              "enum": [
                "VEG",
                "NON_VEG"
              ]
            }
          }
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of item ordered"
        },
        "price":{
          "type": "integer",
          "description": "Total price of the item"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "ODR-001",
        "message": "Invalid address id entered"
      }
    }
  }
}